VESC Driver ROS2 Package - Usage Instructions
==============================================

This package provides ROS2 control for VESC-compatible motor controllers via CAN bus.
Designed for a 4-motor rover with Flipsky 75100 Pro ESCs on CAN bus (can0 @ 500kHz).

PREREQUISITES
-------------
- Ubuntu 24.04 with ROS2 Jazzy
- CAN interface configured (can0)
- socketcan-utils installed: sudo apt install can-utils
- VESC motors connected to CAN bus with unique IDs (0, 1, 2, 3)

BUILD AND INSTALL
-----------------
1. Navigate to your ROS2 workspace:
   cd /home/blake/vesc-ros2

2. Build the package:
   colcon build --packages-select vesc_driver

3. Source the workspace:
   source install/setup.bash

CONFIGURATION
-------------
Edit configuration files in config/ directory:
- motor_params.yaml: General motor parameters (2-motor differential drive)
- four_motor_config.yaml: Individual motor settings (4 independent motors)
- nav2_skid_steer.yaml: 4-motor skid-steer configuration for Nav2

Key parameters to adjust:
- can_interface: CAN interface name (default: "can0")
- wheel_radius: Your wheel radius in meters
- wheel_base: Distance between front/rear axles (longitudinal)
- wheel_track: Distance between left/right wheels (lateral)
- max_rpm: Maximum motor RPM
- motor IDs: CAN IDs for your motors (0-3)

LAUNCH OPTIONS
--------------

1. 4-WHEEL SKID-STEER FOR NAV2 (RECOMMENDED):
   ros2 launch vesc_driver nav2_skid_steer.launch.py

   This is the main mode for Nav2 integration. All 4 motors work together in skid-steer mode.
   Control with standard cmd_vel:
   ros2 topic pub /cmd_vel geometry_msgs/msg/Twist "{linear: {x: 1.0}, angular: {z: 0.5}}"

2. ALL FOUR MOTORS (Independent Control):
   ros2 launch vesc_driver four_motor_rover.launch.py

   This launches 4 independent motor nodes. Control each motor individually:
   ros2 topic pub /vesc/motor_0/cmd_vel std_msgs/msg/Float64 "data: 1.5"
   ros2 topic pub /vesc/motor_1/cmd_vel std_msgs/msg/Float64 "data: 1.5"
   ros2 topic pub /vesc/motor_2/cmd_vel std_msgs/msg/Float64 "data: 1.5"
   ros2 topic pub /vesc/motor_3/cmd_vel std_msgs/msg/Float64 "data: 1.5"

3. DIFFERENTIAL DRIVE (Uses 2 motors only):
   ros2 launch vesc_driver diff_drive_rover.launch.py

   Uses only 2 motors (default: motor 0 and 1) for differential drive:
   ros2 topic pub /cmd_vel geometry_msgs/msg/Twist "{linear: {x: 1.0}, angular: {z: 0.5}}"

4. SINGLE MOTOR (Testing):
   ros2 run vesc_driver vesc_motor_node --ros-args -p motor_id:=0

TOPICS
------
Nav2 Skid-Steer Topics (4-wheel mode):
- /cmd_vel (geometry_msgs/Twist) - Nav2 velocity commands
- /odom (nav_msgs/Odometry) - Combined 4-wheel odometry for Nav2
- /diagnostics (diagnostic_msgs/DiagnosticArray) - System diagnostics
- /tf (tf2_msgs/TFMessage) - Transform: odom -> base_link

Individual Motor Topics (all modes):
- /vesc/motor_X/cmd_vel (std_msgs/Float64) - Velocity command (m/s)
- /vesc/motor_X/cmd_rpm (std_msgs/Float64) - RPM command
- /vesc/motor_X/joint_states (sensor_msgs/JointState) - Motor status/encoder data

Differential Drive Topics (2-motor mode):
- /cmd_vel (geometry_msgs/Twist) - Velocity command
- /odom (nav_msgs/Odometry) - 2-wheel differential odometry
- /diagnostics (diagnostic_msgs/DiagnosticArray) - System diagnostics

MONITORING
----------
Monitor motor status:
ros2 topic echo /vesc/motor_0/joint_states
ros2 topic echo /diagnostics

Check CAN traffic:
candump can0

TROUBLESHOOTING
---------------
1. CAN Interface Issues:
   - Check interface is up: ip link show can0
   - Bring up interface: sudo ip link set can0 up type can bitrate 500000
   - Check for CAN errors: cansend can0 123#DEADBEEF

2. Motor Not Responding:
   - Verify motor CAN ID matches configuration
   - Check VESC tool configuration
   - Ensure motor is powered and connected

3. Permission Issues:
   - Add user to dialout group: sudo usermod -a -G dialout $USER
   - Logout and login again

4. ROS2 Issues:
   - Source workspace: source install/setup.bash
   - Check node status: ros2 node list
   - View node parameters: ros2 param list /vesc/front_left_motor

INTEGRATION WITH NAV2
---------------------
For navigation stack integration with all 4 motors:

1. Launch the skid-steer system:
   ros2 launch vesc_driver nav2_skid_steer.launch.py

2. Configure robot_description with your rover's URDF
3. Set up robot_localization for sensor fusion (optional)
4. Configure nav2 parameters for your robot dimensions

Key Nav2 integration points:
- /cmd_vel: Nav2 sends velocity commands here
- /odom: 4-wheel odometry provides position feedback to Nav2
- /tf: odom -> base_link transform published automatically
- Skid-steer kinematics: Left wheels (0,2) and right wheels (1,3) move together

Robot Configuration (update these in nav2_skid_steer.yaml):
- wheel_track: 0.4m (distance between left/right wheels)
- wheel_base: 0.5m (distance between front/rear axles) 
- max_linear_speed: 1.5 m/s (conservative for Nav2)
- max_angular_speed: 1.5 rad/s

SAFETY FEATURES
---------------
- Command timeout: Motors stop if no commands received for 1 second
- Speed limiting: Commands clamped to configured max speeds  
- Diagnostics: Status monitoring via /diagnostics topic
- Emergency stop: Publish zero velocity to stop all motors

DEVELOPMENT NOTES
-----------------
- Package follows ROS2 best practices
- Modular design allows flexible motor configurations
- socketcan provides reliable CAN communication
- Standard ROS2 message types for easy integration
- Configurable via launch parameters and YAML files

For additional help or issues, check the ROS2 logs:
ros2 log view